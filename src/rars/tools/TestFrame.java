package rars.tools;

import rars.Globals;
import rars.riscv.hardware.AccessNotice;
import rars.riscv.hardware.MemoryAccessNotice;
import rars.riscv.hardware.Memory;
import rars.riscv.hardware.AddressErrorException;

import java.util.Observable;
import javax.swing.*;
import rars.util.Binary;

/**
 * Test clase for MMIO.
 * @author Pablo Mu√±oz
 */
public class TestFrame extends AbstractToolAndApplication {

    private static final String TOOLNAME = "Test frame";
    private static final String VERSION = "0.1";
    
    private static final int TEST_WRITE_TO_ADDRESS = Memory.memoryMapBaseAddress + 0x00;
    private static final int TEST_READ_FROM_ADDRESS = Memory.memoryMapBaseAddress + 0x20;

    public TestFrame() {
        super(TestFrame.TOOLNAME + ", " + TestFrame.VERSION, TestFrame.TOOLNAME);
    }
    
    public TestFrame(String title, String heading) {
        super(title, heading);
    }
    
    @Override
    public String getName() {
        return TestFrame.TOOLNAME;
    }
    
    @Override
    protected JComponent buildMainDisplayArea() {
        initComponents();
        
        memAcountLabel.setText(String.valueOf("0"));
        writeToLabel.setText(writeToLabel.getText()+" (MMIO "+ Binary.intToHexString(TEST_WRITE_TO_ADDRESS)+"):");
        readFromLabel.setText(readFromLabel.getText()+" (MMIO "+ Binary.intToHexString(TEST_READ_FROM_ADDRESS)+"):");

        return panelTools;
    }
    
    @Override
    protected void performSpecialClosingDuties() {
    }
    
    
    @Override
    protected void reset() {
    }
    
    
    @Override
    protected void addAsObserver() {
        addAsObserver(TEST_READ_FROM_ADDRESS, TEST_READ_FROM_ADDRESS);
    }


    @Override
    protected void processRISCVUpdate(Observable resource, AccessNotice notice) {       
        if (!notice.accessIsFromRISCV())
            return;
        // check for a read access in the text segment
        if (notice.getAccessType() == AccessNotice.WRITE && notice instanceof MemoryAccessNotice) {
            // now it is safe to make a cast of the notice
            MemoryAccessNotice memAccNotice = (MemoryAccessNotice) notice;
            int a = memAccNotice.getAddress();
            if (a != TEST_READ_FROM_ADDRESS)
                return;
            int value = memAccNotice.getValue();
            readFromField.setText(String.valueOf(value));
            int count = Integer.valueOf(memAcountLabel.getText())+1;
            memAcountLabel.setText(Integer.toString(count));
        }
    }
    
    // Writes a word to a virtual memory address
    private synchronized void updateMMIOControlAndData(int dataAddr, int dataValue) {
        Globals.memoryAndRegistersLock.lock();
        try {
            try {
                Globals.memory.setRawWord(dataAddr, dataValue);
            } catch (AddressErrorException aee) {
                System.out.println("Tool author specified incorrect MMIO address!" + aee);
                System.exit(0);
            }
        } finally {
            Globals.memoryAndRegistersLock.unlock();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelTools = new javax.swing.JPanel();
        writeToField = new javax.swing.JTextField();
        writeToLabel = new javax.swing.JLabel();
        readFromLabel = new javax.swing.JLabel();
        readFromField = new javax.swing.JTextField();
        memAcountLabel = new javax.swing.JLabel();
        writeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelTools.setBackground(new java.awt.Color(0, 0, 0));
        panelTools.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        writeToField.setText("15");

        writeToLabel.setBackground(new java.awt.Color(102, 102, 102));
        writeToLabel.setForeground(new java.awt.Color(255, 255, 255));
        writeToLabel.setText("Write to MMIO");

        readFromLabel.setBackground(new java.awt.Color(102, 102, 102));
        readFromLabel.setForeground(new java.awt.Color(255, 255, 255));
        readFromLabel.setText("Read from MMIO");

        readFromField.setEditable(false);

        writeButton.setText("Write");
        writeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelToolsLayout = new javax.swing.GroupLayout(panelTools);
        panelTools.setLayout(panelToolsLayout);
        panelToolsLayout.setHorizontalGroup(
            panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelToolsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(readFromLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addComponent(writeToLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(memAcountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                    .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(readFromField)
                        .addGroup(panelToolsLayout.createSequentialGroup()
                            .addComponent(writeToField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(writeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE))))
                .addGap(0, 16, Short.MAX_VALUE))
        );
        panelToolsLayout.setVerticalGroup(
            panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelToolsLayout.createSequentialGroup()
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(writeToLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(writeToField)
                    .addComponent(writeButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelToolsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(readFromLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelToolsLayout.createSequentialGroup()
                        .addComponent(readFromField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(memAcountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTools, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void writeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeButtonActionPerformed
        int value = Integer.valueOf(writeToField.getText());
        updateMMIOControlAndData(TEST_WRITE_TO_ADDRESS, value);
    }//GEN-LAST:event_writeButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TestFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TestFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel memAcountLabel;
    private javax.swing.JPanel panelTools;
    private javax.swing.JTextField readFromField;
    private javax.swing.JLabel readFromLabel;
    private javax.swing.JButton writeButton;
    private javax.swing.JTextField writeToField;
    private javax.swing.JLabel writeToLabel;
    // End of variables declaration//GEN-END:variables
}
